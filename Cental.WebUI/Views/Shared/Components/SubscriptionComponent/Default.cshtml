@model SubscriptionViewModel
@*
    For more information on enabling MVC for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860
*@
<div class="position-relative">
    @if (Model is not null && Model.IsSubscribed)
    {
        <form method="post" id="unsubscription">
            <input type="hidden" id="subscribeId" name="id" class="form-control" value="@Model.SubscribedId" /><br />
            <button type="submit" class="btn btn-secondary rounded-pill position-absolute top-0 end-0 py-2 mt-2 me-2">Abonelik Kaldır</button>
        </form>
    }
    else
    {
        <form method="post" id="subscription">
            <input class="form-control rounded-pill w-100 py-3 ps-4 pe-5" type="email" required placeholder="Emailiniz  Giriniz" id="mail" />
            <button type="submit" class="btn btn-secondary rounded-pill position-absolute top-0 end-0 py-2 mt-2 me-2">Abone Ol</button>
        </form>
    }

</div>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    //Let's try later on using a method not a form
    document.addEventListener('submit',function(event){
           event.preventDefault();
           const target=event.target;
           if(target.Id==='subscription'){
               let formData={
                   Email:document.getElementById('mail').value
               }
               fetch("/UIlLayout/Subscribe", {
                   method:"POST",
                   headers:{
                       "Content-Type":"application/json",
                       "Accept": "application/json"
                   },
                   body: JSON.stringify(formData)
               })
               .then(response=>response.json())
               .then(data =>{
                    if (data.success) {
                        Swal.fire({
                        position:"top-center",
                        title: "Abonenizi başarıyla Tamamlandı!",
                        text: data.message,
                        icon: "success",
                        timer: 3000
                       }).then(()=>{window.location.reload();});
                         // Refresh the page

                    }
                    else{
                       Swal.fire({
                             position:"top-center",
                             title: "İşlem Başarısız!",
                             text: data.message,
                             icon: "error",
                             showConfirmButton: true,
                             timer: 6000
                       });
                    }
               }).catch(error => {
                     // Erreur réseau ou autre : afficher un message d'erreur
                     console.error('Bir hata oluştu',error);
                     Swal.fire({
                         position:"top-center",
                         title: "Error!",
                         text: "Bir hata oluştu.",
                         icon: "error",
                         showConfirmButton: true,
                         timer:1500
                     });
               });
           }else if(target.Id==='unsubscription'){
               console.log('ma forme est bien execute')
                let formData={
                    Id:document.getElementById('subscribeId').value
                };
                fetch("/UIlLayout/UnSubscribe",{
                    method:"POST",
                     headers:{
                        "Content-Type":"application/json",
                        "Accept":"application/json"
                    },
                    body:JSON.stringify(formData)
                })
                .then(response=>response.json())
                .then(data=>{
                        if (data.success) {
                             Swal.fire({
                                 position:"top-center",
                                 title: "İşlem Başarılı!",
                                 text: data.message,
                                 icon: "success",
                                 showConfirmButton:true,
                                 timer: 3000
                        }).then(()=>{window.location.reload();});
                     // Refresh the page

                        }
                        else{
                            Swal.fire({
                                position:"top-center",
                                title: "İşlem Başarısız!",
                                text: data.message,
                                icon: "error",
                                showConfirmButton: true,
                                timer: 6000
                            });
                        }
                })
                .catch(error => {
                 // Erreur réseau ou autre : afficher un message d'erreur
                    console.error('Bir hata oluştu',error);
                    Swal.fire({
                     position:"top-center",
                     title: "Error!",
                     text: "Bir hata oluştu.",
                     icon: "error",
                     showConfirmButton: true,
                     timer:1500
                    });
                });
           }

    });
    
</script>